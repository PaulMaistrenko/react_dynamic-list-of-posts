{"version":3,"sources":["utils/fetchClient.ts","components/Loader/Loader.tsx","components/PostsList.tsx","api/posts.ts","components/NewCommentForm.tsx","api/comments.ts","components/CommentsList.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","api/users.ts","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","Loader","className","PostsList","selectedUser","selectedPost","setSelectedPost","useState","postsList","setPostsList","isLoading","setIsLoading","isProcessingError","setIsProcessingError","useEffect","getUsersPostList","a","userId","id","posts","length","map","post","title","type","classNames","onClick","toggleOpenerSidebar","NewCommentForm","onAddComment","name","setName","email","setEmail","setBody","isNameInputError","setNameInputError","isEmailInputError","setEmailInputError","isBodyInputError","setBodyInputError","isFormLoading","setFormLoading","addCommentToServer","event","preventDefault","onSubmit","htmlFor","placeholder","value","onChange","target","getComments","postId","removeComment","commentId","addComment","comment","CommentsList","commentsList","setCommentsList","isOpenNewForm","setIsOpenNewForm","visibleCommentsList","getCommentsToPost","commentsData","deleteCommentFromServer","handleAddComment","useCallback","newComment","commentData","current","href","PostDetails","UserSelector","usersList","userName","setSelectedUser","isActiveList","setIsActiveList","handleDocumentClick","document","addEventListener","removeEventListener","role","user","handleSelectedUser","App","setUsersList","getUsersFromServer","usersData","Error","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.5b8df503.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport { useState, useEffect } from 'react';\n\nimport { getPosts } from '../api/posts';\n\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\nimport { Loader } from './Loader';\n\ntype Props = {\n  selectedUser: User,\n  selectedPost: Post | null,\n  setSelectedPost: (post: Post | null) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  selectedUser,\n  selectedPost,\n  setSelectedPost,\n}) => {\n  const [postsList, setPostsList] = useState<Post[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isProcessingError, setIsProcessingError] = useState(false);\n  const toggleOpenerSidebar = (post: Post | null) => {\n    setSelectedPost(post);\n  };\n\n  useEffect(() => {\n    const getUsersPostList = async () => {\n      try {\n        if (selectedUser) {\n          const posts = await getPosts(selectedUser.id);\n\n          setPostsList(posts);\n        }\n      } catch {\n        setIsProcessingError(true);\n      } finally {\n        setIsLoading(false);\n        setIsProcessingError(false);\n      }\n    };\n\n    getUsersPostList();\n  }, [selectedUser]);\n\n  if (isLoading) {\n    return <Loader />;\n  }\n\n  if (isProcessingError) {\n    return (\n      <div\n        className=\"notification is-danger\"\n        data-cy=\"PostsLoadingError\"\n      >\n        Something went wrong!\n      </div>\n    );\n  }\n\n  if (!postsList.length) {\n    return (\n      <div\n        className=\"notification is-warning\"\n        data-cy=\"NoPostsYet\"\n      >\n        No posts yet\n      </div>\n    );\n  }\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {postsList.map(post => (\n            <tr\n              key={post.id}\n              data-cy=\"Post\"\n            >\n              <td data-cy=\"PostId\">{post.id}</td>\n              <td data-cy=\"PostTitle\">{post.title}</td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames(\n                    'button',\n                    'is-link',\n                    { 'is-light': selectedPost?.id !== post.id },\n                  )}\n                  onClick={() => {\n                    toggleOpenerSidebar(\n                      selectedPost?.id === post.id ? null : post,\n                    );\n                  }}\n                >\n                  {selectedPost?.id === post.id\n                    ? 'Close'\n                    : 'Open'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import classNames from 'classnames';\nimport { FormEvent, useState } from 'react';\nimport { CommentData } from '../types/Comment';\n\ntype Props = {\n  onAddComment: (comment: CommentData) => Promise<void>,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ onAddComment }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const [isNameInputError, setNameInputError] = useState(false);\n  const [isEmailInputError, setEmailInputError] = useState(false);\n  const [isBodyInputError, setBodyInputError] = useState(false);\n  const [isFormLoading, setFormLoading] = useState(false);\n\n  const handleInputError = () => {\n    setNameInputError(!name);\n    setEmailInputError(!email);\n    setBodyInputError(!body);\n  };\n\n  const resetForm = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  const resetError = () => {\n    setNameInputError(false);\n    setEmailInputError(false);\n    setBodyInputError(false);\n  };\n\n  const addCommentToServer = async (event: FormEvent) => {\n    event.preventDefault();\n    handleInputError();\n\n    if (name && email && body) {\n      try {\n        setFormLoading(true);\n        await onAddComment({\n          name,\n          email,\n          body,\n        });\n        resetError();\n        setBody('');\n      } finally {\n        setFormLoading(false);\n      }\n    }\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={event => addCommentToServer(event)}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', { 'is-danger': isNameInputError })}\n            value={name}\n            onChange={(event) => {\n              setName(event.target.value);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          { isNameInputError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n\n        </div>\n\n        { isNameInputError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', { 'is-danger': isEmailInputError })}\n            value={email}\n            onChange={(event) => {\n              setEmail(event.target.value);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          { isEmailInputError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        { isEmailInputError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea',\n              { 'is-danger': isBodyInputError })}\n            value={body}\n            onChange={(event) => {\n              setBody(event.target.value);\n            }}\n          />\n        </div>\n\n        { isBodyInputError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link',\n              { 'is-loading': isFormLoading })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={resetForm}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { Comment, CommentData } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const removeComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n\nexport const addComment = (comment: CommentData) => {\n  return client.post<Comment>('/comments', comment);\n};\n","import { useState, useEffect, useCallback } from 'react';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Comment, CommentData } from '../types/Comment';\n\nimport { getComments, removeComment, addComment } from '../api/comments';\nimport { Loader } from './Loader';\n\ntype Props = {\n  postId: number,\n};\n\nexport const CommentsList: React.FC<Props> = ({ postId }) => {\n  const [commentsList, setCommentsList] = useState<Comment[]>([]);\n  const [isOpenNewForm, setIsOpenNewForm] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isProcessingError, setIsProcessingError] = useState(false);\n\n  const visibleCommentsList = commentsList.length;\n\n  const handleOpenNewForm = () => {\n    setIsOpenNewForm(true);\n  };\n\n  const getCommentsToPost = async () => {\n    try {\n      setIsLoading(true);\n      const commentsData = await getComments(postId);\n\n      setCommentsList(commentsData);\n    } catch {\n      setIsProcessingError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    getCommentsToPost();\n\n    return () => {\n      setIsLoading(false);\n    };\n  }, [postId]);\n\n  const deleteCommentFromServer = async (commentId: number) => {\n    try {\n      await removeComment(commentId);\n      await getCommentsToPost();\n    } catch {\n      setIsProcessingError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleAddComment = useCallback(async (comment: CommentData) => {\n    const newComment = {\n      postId,\n      ...comment,\n    };\n\n    try {\n      const commentData = await addComment(newComment);\n\n      setCommentsList(current => [...current, commentData]);\n    } catch {\n      setIsProcessingError(true);\n    }\n  }, []);\n\n  if (isLoading) {\n    return <Loader />;\n  }\n\n  if (isProcessingError) {\n    return (\n      <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n        Something went wrong\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"block\">\n      {!visibleCommentsList\n        ? (\n          <p\n            className=\"title is-4\"\n            data-cy=\"NoCommentsMessage\"\n          >\n            No comments yet\n          </p>\n        )\n        : (\n          <>\n            <p className=\"title is-4\">Comments:</p>\n            {commentsList.map(comment => (\n              <article\n                key={comment.id}\n                className=\"message is-small\"\n                data-cy=\"Comment\"\n              >\n                <div className=\"message-header\">\n                  <a\n                    href={`mailto:${comment.email}`}\n                    data-cy=\"CommentAuthor\"\n                  >\n                    {comment.name}\n                  </a>\n                  <button\n                    data-cy=\"CommentDelete\"\n                    type=\"button\"\n                    className=\"delete is-small\"\n                    aria-label=\"delete\"\n                    onClick={() => {\n                      deleteCommentFromServer(comment.id);\n                    }}\n                  >\n                    delete button\n                  </button>\n                </div>\n                <div\n                  className=\"message-body\"\n                  data-cy=\"CommentBody\"\n                >\n                  {comment.body}\n                </div>\n              </article>\n\n            ))}\n          </>\n        )}\n\n      {isOpenNewForm\n        ? <NewCommentForm onAddComment={handleAddComment} />\n        : (\n          <button\n            data-cy=\"WriteCommentButton\"\n            type=\"button\"\n            className=\"button is-link\"\n            onClick={handleOpenNewForm}\n          >\n            Write a comment\n          </button>\n        )}\n    </div>\n\n  );\n};\n","import { Post } from '../types/Post';\nimport { CommentsList } from './CommentsList';\n\ntype Props = {\n  selectedPost: Post,\n};\n\nexport const PostDetails: React.FC<Props> = (\n  {\n    selectedPost,\n  },\n) => {\n  const {\n    id,\n    title,\n    body,\n  } = selectedPost;\n\n  return (\n    <div className=\"tile is-child box is-success \">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${id}: ${title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {body}\n          </p>\n        </div>\n\n        <CommentsList postId={id} />\n      </div>\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport classNames from 'classnames';\nimport { useState, useEffect } from 'react';\nimport { User } from '../types/User';\n\ntype Props = {\n  usersList: User[],\n  userName: string | undefined,\n  setSelectedUser: (user:User) => void,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  usersList,\n  userName,\n  setSelectedUser,\n}) => {\n  const [isActiveList, setIsActiveList] = useState(false);\n\n  const toggleActiveList = () => {\n    setIsActiveList(!isActiveList);\n  };\n\n  const handleSelectedUser = (user: User) => {\n    setSelectedUser(user);\n    setIsActiveList(!isActiveList);\n  };\n\n  useEffect(() => {\n    if (!isActiveList) {\n      return;\n    }\n\n    const handleDocumentClick = () => {\n      setIsActiveList(false);\n    };\n\n    document.addEventListener('click', handleDocumentClick);\n\n    // eslint-disable-next-line consistent-return\n    return () => {\n      document.removeEventListener('click', handleDocumentClick);\n    };\n  }, [isActiveList]);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', { 'is-active': isActiveList })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={toggleActiveList}\n        >\n          { userName\n            ? <span>{userName}</span>\n            : <span>Choose a user</span> }\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        { isActiveList && (\n          <div className=\"dropdown-content\">\n            {usersList.map(user => (\n              <a\n                key={user.id}\n                href={`#user-${user.id}`}\n                className=\"dropdown-item\"\n                onClick={() => {\n                  handleSelectedUser(user);\n                }}\n              >\n                {user.name}\n              </a>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n","import { useState, useEffect } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\n\nimport { getUsers } from './api/users';\n\nimport { User } from './types/User';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [usersList, setUsersList] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  useEffect(() => {\n    const getUsersFromServer = async () => {\n      try {\n        const usersData = await getUsers();\n\n        setUsersList(usersData);\n      } catch (error) {\n        throw Error('Unable to load users');\n      }\n    };\n\n    getUsersFromServer();\n  }, []);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  usersList={usersList}\n                  userName={selectedUser?.name}\n                  setSelectedUser={setSelectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                { !selectedUser\n                  ? (\n                    <p data-cy=\"NoSelectedUser\">\n                      No user selected\n                    </p>\n                  )\n                  : (\n                    <PostsList\n                      selectedUser={selectedUser}\n                      selectedPost={selectedPost}\n                      setSelectedPost={setSelectedPost}\n                    />\n                  )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            { selectedPost && (\n              <PostDetails\n                selectedPost={selectedPost}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}